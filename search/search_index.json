{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-slack","text":""},{"location":"#welcome","title":"Welcome!","text":"<p><code>prefect-slack</code> is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-slack</code>:</p> <pre><code>pip install prefect-slack\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_slack\n</code></pre> <p>Note, to use the <code>load</code> method on blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#slack-setup","title":"Slack setup","text":"<p>In order to use tasks in the collection, you'll first need to create a Slack app and install it in your Slack workspace. You can create a Slack app by navigating to the apps page for your Slack account and selecting Create New App.</p> <p>For tasks that require a Bot user OAuth token, you can get a token for your app by navigating to your app's OAuth &amp; Permissions page.</p> <p>For tasks that require a Webhook URL, you can generate new Webhook URLs by navigating to your app's Incoming Webhooks page.</p> <p>Slack's Basic app setup guide provides additional details on setting up a Slack app.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_slack import SlackCredentials\nfrom prefect_slack.messages import send_chat_message\n\n\n@flow\ndef example_send_message_flow():\n   context = get_run_context()\n\n   # Run other tasks and subflows here\n\n   token = \"xoxb-your-bot-token-here\"\n   send_chat_message(\n         slack_credentials=SlackCredentials(token=token),\n         channel=\"#prefect\",\n         text=f\"Flow run {context.flow_run.name} completed :tada:\"\n   )\n\nexample_send_message_flow()\n</code></pre>"},{"location":"#use-with_options-to-customize-options-on-any-existing-task-or-flow","title":"Use <code>with_options</code> to customize options on any existing task or flow:","text":"<pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_slack import SlackCredentials\nfrom prefect_slack.messages import send_chat_message\n\ncustom_send_chat_message = send_chat_message.with_options(\n    name=\"My custom task name\",\n    retries=2,\n    retry_delay_seconds=10,\n)\n\n@flow\ndef example_with_options_flow():\n\n    slack_credentials = SlackCredentials.load(\"my_slack_token\")\n    custom_send_chat_message(\n            slack_credentials=slack_credentials,\n            channel=\"#prefect\",\n            text=f\"Flow run {context.flow_run.name} completed :tada:\"\n    )\n\nexample_with_options_flow()\n</code></pre> <p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-slack</code>, feel free to open an issue in the prefect-slack repository.</p> <p>If you have any questions or issues while using <code>prefect-slack</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-slack</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-slack</code> for development, first clone the repository and then perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-slack.git\n\ncd prefect-slack/\n\npip install -e \".[dev]\"\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_slack.credentials","title":"<code>prefect_slack.credentials</code>","text":"<p>Credential classes used to perform authenticated interacting with Slack.</p>"},{"location":"credentials/#prefect_slack.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_slack.credentials.SlackCredentials","title":"<code>SlackCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block holding Slack credentials for use in tasks and flows.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <p>Bot user OAuth token for the Slack app used to perform actions.</p> required Example <p>Load stored Slack credentials: <pre><code>from prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>class SlackCredentials(Block):\n\"\"\"\n    Block holding Slack credentials for use in tasks and flows.\n\n    Args:\n        token: Bot user OAuth token for the Slack app used to perform actions.\n\n    Example:\n        Load stored Slack credentials:\n        ```python\n        from prefect_slack import SlackCredentials\n        slack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"  # noqa E501\n\n    _block_type_name = \"Slack Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-slack/credentials/#prefect_slack.credentials.SlackCredentials\"  # noqa\n\n    token: SecretStr = Field(\n        default=...,\n        description=\"Bot user OAuth token for the Slack app used to perform actions.\",\n    )\n\n    def get_client(self) -&gt; AsyncWebClient:\n\"\"\"\n        Returns an authenticated `AsyncWebClient` to interact with the Slack API.\n        \"\"\"\n        return AsyncWebClient(token=self.token.get_secret_value())\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_slack.credentials.SlackCredentials.get_client","title":"<code>get_client()</code>","text":"<p>Returns an authenticated <code>AsyncWebClient</code> to interact with the Slack API.</p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>def get_client(self) -&gt; AsyncWebClient:\n\"\"\"\n    Returns an authenticated `AsyncWebClient` to interact with the Slack API.\n    \"\"\"\n    return AsyncWebClient(token=self.token.get_secret_value())\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook","title":"<code>SlackWebhook</code>","text":"<p>         Bases: <code>NotificationBlock</code></p> <p>Block holding a Slack webhook for use in tasks and flows.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <p>Slack webhook URL which can be used to send messages (e.g. <code>https://hooks.slack.com/XXX</code>).</p> required Example <p>Load stored Slack webhook: <pre><code>from prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>class SlackWebhook(NotificationBlock):\n\"\"\"\n    Block holding a Slack webhook for use in tasks and flows.\n\n    Args:\n        url: Slack webhook URL which can be used to send messages\n            (e.g. `https://hooks.slack.com/XXX`).\n\n    Example:\n        Load stored Slack webhook:\n        ```python\n        from prefect_slack import SlackWebhook\n        slack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Slack Incoming Webhook\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-slack/credentials/#prefect_slack.credentials.SlackWebhook\"  # noqa\n\n    url: SecretStr = Field(\n        default=...,\n        title=\"Webhook URL\",\n        description=\"Slack webhook URL which can be used to send messages.\",\n        example=\"https://hooks.slack.com/XXX\",\n    )\n\n    def get_client(self) -&gt; AsyncWebhookClient:\n\"\"\"\n        Returns an authenticated `AsyncWebhookClient` to interact with the configured\n        Slack webhook.\n        \"\"\"\n        return AsyncWebhookClient(url=self.url.get_secret_value())\n\n    @sync_compatible\n    async def notify(self, body: str, subject: Optional[str] = None):\n\"\"\"\n        Sends a message to the Slack channel.\n        \"\"\"\n        client = self.get_client()\n        await client.send(text=body)\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook-functions","title":"Functions","text":""},{"location":"credentials/#prefect_slack.credentials.SlackWebhook.get_client","title":"<code>get_client()</code>","text":"<p>Returns an authenticated <code>AsyncWebhookClient</code> to interact with the configured Slack webhook.</p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>def get_client(self) -&gt; AsyncWebhookClient:\n\"\"\"\n    Returns an authenticated `AsyncWebhookClient` to interact with the configured\n    Slack webhook.\n    \"\"\"\n    return AsyncWebhookClient(url=self.url.get_secret_value())\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook.notify","title":"<code>notify(body, subject=None)</code>  <code>async</code>","text":"<p>Sends a message to the Slack channel.</p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>@sync_compatible\nasync def notify(self, body: str, subject: Optional[str] = None):\n\"\"\"\n    Sends a message to the Slack channel.\n    \"\"\"\n    client = self.get_client()\n    await client.send(text=body)\n</code></pre>"},{"location":"messages/","title":"Messages","text":""},{"location":"messages/#prefect_slack.messages","title":"<code>prefect_slack.messages</code>","text":"<p>Tasks for sending Slack messages.</p>"},{"location":"messages/#prefect_slack.messages-classes","title":"Classes","text":""},{"location":"messages/#prefect_slack.messages-functions","title":"Functions","text":""},{"location":"messages/#prefect_slack.messages.send_chat_message","title":"<code>send_chat_message(channel, slack_credentials, text=None, attachments=None, slack_blocks=None)</code>  <code>async</code>","text":"<p>Sends a message to a Slack channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>str</code> <p>The name of the channel in which to post the chat messsage (e.g. #general).</p> required <code>slack_credentials</code> <code>SlackCredentials</code> <p>Instance of <code>SlackCredentials</code> initialized with a Slack bot token.</p> required <code>text</code> <code>Optional[str]</code> <p>Contents of the message. It's a best practice to always provide a <code>text</code> argument when posting a message. The <code>text</code> argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc.</p> <code>None</code> <code>attachments</code> <code>Optional[Sequence[Union[Dict, Attachment]]]</code> <p>List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments.</p> <code>None</code> <code>slack_blocks</code> <code>Optional[Sequence[Union[Dict, Block]]]</code> <p>List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>Response from the Slack API. Example response structures can be found in the Slack API docs.</p> Example <p>Post a message at the end of a flow run.</p> <pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_slack import SlackCredentials\nfrom prefect_slack.messages import send_chat_message\n\n\n@flow\ndef example_send_message_flow():\n    context = get_run_context()\n\n    # Run other tasks and subflows here\n\n    token = \"xoxb-your-bot-token-here\"\n    send_chat_message(\n        slack_credentials=SlackCredentials(token),\n        channel=\"#prefect\",\n        text=f\"Flow run {context.flow_run.name} completed :tada:\"\n    )\n\nexample_send_message_flow()\n</code></pre> Source code in <code>prefect_slack/messages.py</code> <pre><code>@task\nasync def send_chat_message(\n    channel: str,\n    slack_credentials: SlackCredentials,\n    text: Optional[str] = None,\n    attachments: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.attachments.Attachment\"]]\n    ] = None,\n    slack_blocks: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.blocks.Block\"]]\n    ] = None,\n) -&gt; Dict:\n\"\"\"\n    Sends a message to a Slack channel.\n\n    Args:\n        channel: The name of the channel in which to post the chat messsage\n            (e.g. #general).\n        slack_credentials: Instance of `SlackCredentials` initialized with a Slack\n            bot token.\n        text: Contents of the message. It's a best practice to always provide a `text`\n            argument when posting a message. The `text` argument is used in places where\n            content cannot be rendered such as: system push notifications, assistive\n            technology such as screen readers, etc.\n        attachments: List of objects defining secondary context in the posted Slack\n            message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments)\n            provide guidance on building attachments.\n        slack_blocks: List of objects defining the layout and formatting of the posted\n            message. The [Slack API docs](https://api.slack.com/block-kit/building)\n            provide guidance on building messages with blocks.\n\n    Returns:\n        Dict: Response from the Slack API. Example response structures can be found in\n            the [Slack API docs](https://api.slack.com/methods/chat.postMessage#examples).\n\n    Example:\n        Post a message at the end of a flow run.\n\n        ```python\n        from prefect import flow\n        from prefect.context import get_run_context\n        from prefect_slack import SlackCredentials\n        from prefect_slack.messages import send_chat_message\n\n\n        @flow\n        def example_send_message_flow():\n            context = get_run_context()\n\n            # Run other tasks and subflows here\n\n            token = \"xoxb-your-bot-token-here\"\n            send_chat_message(\n                slack_credentials=SlackCredentials(token),\n                channel=\"#prefect\",\n                text=f\"Flow run {context.flow_run.name} completed :tada:\"\n            )\n\n        example_send_message_flow()\n        ```\n    \"\"\"  # noqa\n    logger = get_run_logger()\n    logger.info(\"Posting chat message to %s\", channel)\n\n    client = slack_credentials.get_client()\n    result = await client.chat_postMessage(\n        channel=channel, text=text, blocks=slack_blocks, attachments=attachments\n    )\n    return result.data\n</code></pre>"},{"location":"messages/#prefect_slack.messages.send_incoming_webhook_message","title":"<code>send_incoming_webhook_message(slack_webhook, text=None, attachments=None, slack_blocks=None)</code>  <code>async</code>","text":"<p>Sends a message via an incoming webhook.</p> <p>Parameters:</p> Name Type Description Default <code>slack_webhook</code> <code>SlackWebhook</code> <p>Instance of <code>SlackWebhook</code> initialized with a Slack webhook URL.</p> required <code>text</code> <code>Optional[str]</code> <p>Contents of the message. It's a best practice to always provide a <code>text</code> argument when posting a message. The <code>text</code> argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc.</p> <code>None</code> <code>attachments</code> <code>Optional[Sequence[Union[Dict, Attachment]]]</code> <p>List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments.</p> <code>None</code> <code>slack_blocks</code> <code>Optional[Sequence[Union[Dict, Block]]]</code> <p>List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks.</p> <code>None</code> Example <p>Post a message at the end of a flow run.</p> <pre><code>from prefect import flow\nfrom prefect_slack import SlackWebhook\nfrom prefect_slack.messages import send_incoming_webhook_message\n\n\n@flow\ndef example_send_message_flow():\n    # Run other tasks and subflows here\n\n    webhook_url = \"https://hooks.slack.com/XXX\"\n    send_incoming_webhook_message(\n        slack_webhook=SlackWebhook(\n            url=webhook_url\n        ),\n        text=\"Warehouse loading flow completed :sparkles:\"\n    )\n\nexample_send_message_flow()\n</code></pre> Source code in <code>prefect_slack/messages.py</code> <pre><code>@task\nasync def send_incoming_webhook_message(\n    slack_webhook: SlackWebhook,\n    text: Optional[str] = None,\n    attachments: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.attachments.Attachment\"]]\n    ] = None,\n    slack_blocks: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.blocks.Block\"]]\n    ] = None,\n) -&gt; None:\n\"\"\"\n    Sends a message via an incoming webhook.\n\n    Args:\n        slack_webhook: Instance of `SlackWebhook` initialized with a Slack\n            webhook URL.\n        text: Contents of the message. It's a best practice to always provide a `text`\n            argument when posting a message. The `text` argument is used in places where\n            content cannot be rendered such as: system push notifications, assistive\n            technology such as screen readers, etc.\n        attachments: List of objects defining secondary context in the posted Slack\n            message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments)\n            provide guidance on building attachments.\n        slack_blocks: List of objects defining the layout and formatting of the posted\n            message. The [Slack API docs](https://api.slack.com/block-kit/building)\n            provide guidance on building messages with blocks.\n\n    Example:\n        Post a message at the end of a flow run.\n\n        ```python\n        from prefect import flow\n        from prefect_slack import SlackWebhook\n        from prefect_slack.messages import send_incoming_webhook_message\n\n\n        @flow\n        def example_send_message_flow():\n            # Run other tasks and subflows here\n\n            webhook_url = \"https://hooks.slack.com/XXX\"\n            send_incoming_webhook_message(\n                slack_webhook=SlackWebhook(\n                    url=webhook_url\n                ),\n                text=\"Warehouse loading flow completed :sparkles:\"\n            )\n\n        example_send_message_flow()\n        ```\n    \"\"\"  # noqa\n    logger = get_run_logger()\n    logger.info(\"Posting message to provided webhook\")\n\n    client = slack_webhook.get_client()\n    await client.send(text=text, attachments=attachments, blocks=slack_blocks)\n</code></pre>"}]}