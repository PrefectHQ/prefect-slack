{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-slack Welcome! prefect-slack is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows. Getting Started Python setup Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-slack pip install prefect-slack Then, register to view the block on Prefect Cloud: prefect block register -m prefect_slack Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Slack setup In order to use tasks in the collection, you'll first need to create an Slack app and install it in your Slack workspace. You can create a Slack app by navigating to the apps page for your Slack account and selecting 'Create New App'. For tasks that require a Bot user OAuth token, you can get a token for your app by navigating to your apps OAuth & Permissions page. For tasks that require and Webhook URL, you get generate new Webhook URLs by navigating to you apps Incoming Webhooks page. Slack's Basic app setup guide provides additional details on setting up a Slack app. Write and run a flow from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow () Use with_options to customize options on any existing task or flow: from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message custom_send_chat_message = send_chat_message . with_options ( name = \"My custom task name\" , retries = 2 , retry_delay_seconds = 10 , ) @flow def example_wiht_options_flow (): slack_credentials = SlackCredentials . load ( \"my_slack_token\" ) custom_send_chat_message ( slack_credentials = slack_credentials , channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_wiht_options_flow () ``` For more tips on how to use tasks and flows in a Collection , check out [ Using Collections ]( https : // orion - docs . prefect . io / collections / usage / ) ! ## Resources If you encounter any bugs while using ` prefect - slack ` , feel free to open an issue in the [ prefect - slack ]( https : // github . com / PrefectHQ / prefect - slack ) repository . If you have any questions or issues while using ` prefect - slack ` , you can find help in either the [ Prefect Discourse forum ]( https : // discourse . prefect . io / ) or the [ Prefect Slack community ]( https : // prefect . io / slack ) Feel free to \u2b50\ufe0f or watch [ ` prefect - slack ` ]( https : // github . com / PrefectHQ / prefect - slack ) for updates too ! ## Development If you 'd like to install a version of `prefect-slack` for development, first clone the repository and then perform an editable install with `pip`: ``` bash git clone https : // github . com / PrefectHQ / prefect - slack . git cd prefect - slack / pip install - e \".[dev]\"","title":"Home"},{"location":"#prefect-slack","text":"","title":"prefect-slack"},{"location":"#welcome","text":"prefect-slack is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-slack pip install prefect-slack Then, register to view the block on Prefect Cloud: prefect block register -m prefect_slack Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#slack-setup","text":"In order to use tasks in the collection, you'll first need to create an Slack app and install it in your Slack workspace. You can create a Slack app by navigating to the apps page for your Slack account and selecting 'Create New App'. For tasks that require a Bot user OAuth token, you can get a token for your app by navigating to your apps OAuth & Permissions page. For tasks that require and Webhook URL, you get generate new Webhook URLs by navigating to you apps Incoming Webhooks page. Slack's Basic app setup guide provides additional details on setting up a Slack app.","title":"Slack setup"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow ()","title":"Write and run a flow"},{"location":"#use-with_options-to-customize-options-on-any-existing-task-or-flow","text":"from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message custom_send_chat_message = send_chat_message . with_options ( name = \"My custom task name\" , retries = 2 , retry_delay_seconds = 10 , ) @flow def example_wiht_options_flow (): slack_credentials = SlackCredentials . load ( \"my_slack_token\" ) custom_send_chat_message ( slack_credentials = slack_credentials , channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_wiht_options_flow () ``` For more tips on how to use tasks and flows in a Collection , check out [ Using Collections ]( https : // orion - docs . prefect . io / collections / usage / ) ! ## Resources If you encounter any bugs while using ` prefect - slack ` , feel free to open an issue in the [ prefect - slack ]( https : // github . com / PrefectHQ / prefect - slack ) repository . If you have any questions or issues while using ` prefect - slack ` , you can find help in either the [ Prefect Discourse forum ]( https : // discourse . prefect . io / ) or the [ Prefect Slack community ]( https : // prefect . io / slack ) Feel free to \u2b50\ufe0f or watch [ ` prefect - slack ` ]( https : // github . com / PrefectHQ / prefect - slack ) for updates too ! ## Development If you 'd like to install a version of `prefect-slack` for development, first clone the repository and then perform an editable install with `pip`: ``` bash git clone https : // github . com / PrefectHQ / prefect - slack . git cd prefect - slack / pip install - e \".[dev]\"","title":"Use with_options to customize options on any existing task or flow:"},{"location":"credentials/","text":"prefect_slack.credentials Credential classes used to perform authenticated interacting with Slack Classes SlackCredentials Bases: Block Block holding Slack credentials for use in tasks and flows. Parameters: Name Type Description Default token Bot user OAuth token for the Slack app used to perform actions. required Example Load stored Slack credentials: from prefect_slack import SlackCredentials slack_credentials_block = SlackCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_slack/credentials.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class SlackCredentials ( Block ): \"\"\" Block holding Slack credentials for use in tasks and flows. Args: token: Bot user OAuth token for the Slack app used to perform actions. Example: Load stored Slack credentials: ```python from prefect_slack import SlackCredentials slack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _block_type_name = \"Slack Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\" # noqa token : SecretStr = Field ( default =... , description = \"Bot user OAuth token for the Slack app used to perform actions.\" , ) def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token . get_secret_value ()) Functions get_client () Returns an authenticated AsyncWebClient to interact with the Slack API. Source code in prefect_slack/credentials.py 36 37 38 39 40 def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token . get_secret_value ()) SlackWebhook Bases: NotificationBlock Block holding a Slack webhook for use in tasks and flows. Parameters: Name Type Description Default url Slack webhook URL which can be used to send messages (e.g. https://hooks.slack.com/XXX ). required Example Load stored Slack webhook: from prefect_slack import SlackWebhook slack_webhook_block = SlackWebhook . load ( \"BLOCK_NAME\" ) Source code in prefect_slack/credentials.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class SlackWebhook ( NotificationBlock ): \"\"\" Block holding a Slack webhook for use in tasks and flows. Args: url: Slack webhook URL which can be used to send messages (e.g. `https://hooks.slack.com/XXX`). Example: Load stored Slack webhook: ```python from prefect_slack import SlackWebhook slack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Slack Webhook\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\" # noqa url : SecretStr = Field ( default =... , title = \"Webhook URL\" , description = \"Slack webhook URL which can be used to send messages.\" , example = \"https://hooks.slack.com/XXX\" , ) def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url . get_secret_value ()) @sync_compatible async def notify ( self , body : str , subject : Optional [ str ] = None ): \"\"\" Sends a message to the Slack channel. \"\"\" client = self . get_client () await client . send ( text = body ) Functions get_client () Returns and authenticated AsyncWebhookClient to interact with the configured Slack webhook. Source code in prefect_slack/credentials.py 69 70 71 72 73 74 def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url . get_secret_value ()) notify ( body , subject = None ) async Sends a message to the Slack channel. Source code in prefect_slack/credentials.py 76 77 78 79 80 81 82 @sync_compatible async def notify ( self , body : str , subject : Optional [ str ] = None ): \"\"\" Sends a message to the Slack channel. \"\"\" client = self . get_client () await client . send ( text = body )","title":"Credentials"},{"location":"credentials/#prefect_slack.credentials","text":"Credential classes used to perform authenticated interacting with Slack","title":"credentials"},{"location":"credentials/#prefect_slack.credentials-classes","text":"","title":"Classes"},{"location":"credentials/#prefect_slack.credentials.SlackCredentials","text":"Bases: Block Block holding Slack credentials for use in tasks and flows. Parameters: Name Type Description Default token Bot user OAuth token for the Slack app used to perform actions. required Example Load stored Slack credentials: from prefect_slack import SlackCredentials slack_credentials_block = SlackCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_slack/credentials.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class SlackCredentials ( Block ): \"\"\" Block holding Slack credentials for use in tasks and flows. Args: token: Bot user OAuth token for the Slack app used to perform actions. Example: Load stored Slack credentials: ```python from prefect_slack import SlackCredentials slack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _block_type_name = \"Slack Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\" # noqa token : SecretStr = Field ( default =... , description = \"Bot user OAuth token for the Slack app used to perform actions.\" , ) def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token . get_secret_value ())","title":"SlackCredentials"},{"location":"credentials/#prefect_slack.credentials.SlackCredentials-functions","text":"","title":"Functions"},{"location":"credentials/#prefect_slack.credentials.SlackCredentials.get_client","text":"Returns an authenticated AsyncWebClient to interact with the Slack API. Source code in prefect_slack/credentials.py 36 37 38 39 40 def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token . get_secret_value ())","title":"get_client()"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook","text":"Bases: NotificationBlock Block holding a Slack webhook for use in tasks and flows. Parameters: Name Type Description Default url Slack webhook URL which can be used to send messages (e.g. https://hooks.slack.com/XXX ). required Example Load stored Slack webhook: from prefect_slack import SlackWebhook slack_webhook_block = SlackWebhook . load ( \"BLOCK_NAME\" ) Source code in prefect_slack/credentials.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class SlackWebhook ( NotificationBlock ): \"\"\" Block holding a Slack webhook for use in tasks and flows. Args: url: Slack webhook URL which can be used to send messages (e.g. `https://hooks.slack.com/XXX`). Example: Load stored Slack webhook: ```python from prefect_slack import SlackWebhook slack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Slack Webhook\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\" # noqa url : SecretStr = Field ( default =... , title = \"Webhook URL\" , description = \"Slack webhook URL which can be used to send messages.\" , example = \"https://hooks.slack.com/XXX\" , ) def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url . get_secret_value ()) @sync_compatible async def notify ( self , body : str , subject : Optional [ str ] = None ): \"\"\" Sends a message to the Slack channel. \"\"\" client = self . get_client () await client . send ( text = body )","title":"SlackWebhook"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook-functions","text":"","title":"Functions"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook.get_client","text":"Returns and authenticated AsyncWebhookClient to interact with the configured Slack webhook. Source code in prefect_slack/credentials.py 69 70 71 72 73 74 def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url . get_secret_value ())","title":"get_client()"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook.notify","text":"Sends a message to the Slack channel. Source code in prefect_slack/credentials.py 76 77 78 79 80 81 82 @sync_compatible async def notify ( self , body : str , subject : Optional [ str ] = None ): \"\"\" Sends a message to the Slack channel. \"\"\" client = self . get_client () await client . send ( text = body )","title":"notify()"},{"location":"messages/","text":"prefect_slack.messages Tasks for sending Slack messages Classes Functions send_chat_message ( channel , slack_credentials , text = None , attachments = None , slack_blocks = None ) async Sends a message to a Slack channel Parameters: Name Type Description Default channel str The name of the channel in which to post the chat messsage (e.g. #general) required slack_credentials SlackCredentials Instance of SlackCredentials initialized with a Slack bot token required text Optional [ str ] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional [ Sequence [ Union [ Dict , Attachment ]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional [ Sequence [ Union [ Dict , Block ]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Returns: Name Type Description Dict Dict Response from the Slack API. Example response structures can be found in the Slack API docs Examples: Post a message at the end of a flow run from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow () Source code in prefect_slack/messages.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @task async def send_chat_message ( channel : str , slack_credentials : SlackCredentials , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> Dict : \"\"\" Sends a message to a Slack channel Args: channel: The name of the channel in which to post the chat messsage (e.g. #general) slack_credentials: Instance of `SlackCredentials` initialized with a Slack bot token text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Returns: Dict: Response from the Slack API. Example response structures can be found in the [Slack API docs](https://api.slack.com/methods/chat.postMessage#examples) Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow(): context = get_run_context() # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message( slack_credentials=SlackCredentials(token), channel=\"#prefect\", text=f\"Flow run {context.flow_run.name} completed :tada:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting chat message to %s \" , channel ) client = slack_credentials . get_client () result = await client . chat_postMessage ( channel = channel , text = text , blocks = slack_blocks , attachments = attachments ) return result . data send_incoming_webhook_message ( slack_webhook , text = None , attachments = None , slack_blocks = None ) async Sends a message via an incoming webhook Parameters: Name Type Description Default slack_webhook SlackWebhook Instance of SlackWebhook initialized with a Slack webhook URL. required text Optional [ str ] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional [ Sequence [ Union [ Dict , Attachment ]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional [ Sequence [ Union [ Dict , Block ]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Examples: Post a message at the end of a flow run from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow (): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message ( slack_webhook = SlackWebhook ( url = webhook_url ), text = \"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow () Source code in prefect_slack/messages.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @task async def send_incoming_webhook_message ( slack_webhook : SlackWebhook , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> None : \"\"\" Sends a message via an incoming webhook Args: slack_webhook: Instance of `SlackWebhook` initialized with a Slack webhook URL. text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow(): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message( slack_webhook=SlackWebhook( url=webhook_url ), text=\"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting message to provided webhook\" ) client = slack_webhook . get_client () await client . send ( text = text , attachments = attachments , blocks = slack_blocks )","title":"Messages"},{"location":"messages/#prefect_slack.messages","text":"Tasks for sending Slack messages","title":"messages"},{"location":"messages/#prefect_slack.messages-classes","text":"","title":"Classes"},{"location":"messages/#prefect_slack.messages-functions","text":"","title":"Functions"},{"location":"messages/#prefect_slack.messages.send_chat_message","text":"Sends a message to a Slack channel Parameters: Name Type Description Default channel str The name of the channel in which to post the chat messsage (e.g. #general) required slack_credentials SlackCredentials Instance of SlackCredentials initialized with a Slack bot token required text Optional [ str ] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional [ Sequence [ Union [ Dict , Attachment ]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional [ Sequence [ Union [ Dict , Block ]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Returns: Name Type Description Dict Dict Response from the Slack API. Example response structures can be found in the Slack API docs Examples: Post a message at the end of a flow run from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow () Source code in prefect_slack/messages.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @task async def send_chat_message ( channel : str , slack_credentials : SlackCredentials , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> Dict : \"\"\" Sends a message to a Slack channel Args: channel: The name of the channel in which to post the chat messsage (e.g. #general) slack_credentials: Instance of `SlackCredentials` initialized with a Slack bot token text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Returns: Dict: Response from the Slack API. Example response structures can be found in the [Slack API docs](https://api.slack.com/methods/chat.postMessage#examples) Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow(): context = get_run_context() # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message( slack_credentials=SlackCredentials(token), channel=\"#prefect\", text=f\"Flow run {context.flow_run.name} completed :tada:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting chat message to %s \" , channel ) client = slack_credentials . get_client () result = await client . chat_postMessage ( channel = channel , text = text , blocks = slack_blocks , attachments = attachments ) return result . data","title":"send_chat_message()"},{"location":"messages/#prefect_slack.messages.send_incoming_webhook_message","text":"Sends a message via an incoming webhook Parameters: Name Type Description Default slack_webhook SlackWebhook Instance of SlackWebhook initialized with a Slack webhook URL. required text Optional [ str ] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional [ Sequence [ Union [ Dict , Attachment ]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional [ Sequence [ Union [ Dict , Block ]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Examples: Post a message at the end of a flow run from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow (): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message ( slack_webhook = SlackWebhook ( url = webhook_url ), text = \"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow () Source code in prefect_slack/messages.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @task async def send_incoming_webhook_message ( slack_webhook : SlackWebhook , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> None : \"\"\" Sends a message via an incoming webhook Args: slack_webhook: Instance of `SlackWebhook` initialized with a Slack webhook URL. text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow(): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message( slack_webhook=SlackWebhook( url=webhook_url ), text=\"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting message to provided webhook\" ) client = slack_webhook . get_client () await client . send ( text = text , attachments = attachments , blocks = slack_blocks )","title":"send_incoming_webhook_message()"}]}