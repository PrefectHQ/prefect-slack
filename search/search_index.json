{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reliably send Slack messages with prefect-slack","text":"<p><code>prefect-slack</code> is a collection of prebuilt Prefect integrations that can be used to interact with Slack.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#saving-credentials-to-block","title":"Saving credentials to block","text":"<p>In order to use tasks in the collection, you'll first need to create a Slack app and install it in your Slack workspace.</p> <p>You can create a Slack app by navigating to the apps page for your Slack account and selecting Create New App.</p> <p>Slack's Basic app setup guide provides additional details on setting up a Slack app.</p> WebhookOAuth <p>For integrations that require a Webhook URL, you can generate new Webhook URLs by navigating to your app's Incoming Webhooks page.</p> <p>Click Add New Webhook to Workspace and copy the webhook URL, formatted like <code>https://hooks.slack.com/services/...</code>.</p> <p>Then, create and run a short script, replacing the placeholders.</p> <pre><code>from prefect_slack import SlackWebhook\n\nSlackWebhook(url=\"WEBHOOK_URL_PLACEHOLDER\").save(\"BLOCK-NAME-PLACEHOLDER\")\n</code></pre> <p>Congrats! You can now easily load the saved block, which holds your credentials:</p> <pre><code>from prefect_slack import SlackWebhook\n\nSlackWebhook.load(\"BLOCK-NAME-PLACEHOLDER\")\n</code></pre> <p>For integrations that require a Bot user OAuth token, you can get a token for your app by navigating to your app's OAuth &amp; Permissions page.</p> <p>Locate Bot User OAuth Token and copy the token, formatted like <code>xoxb-...</code>.</p> <p>Then, create and run a short script, replacing placeholders.</p> <pre><code>from prefect_slack import SlackCredentials\n\nSlackCredentials(token=\"TOKEN-PLACEHOLDER\").save(\"BLOCK-NAME-PLACEHOLDER\")\n</code></pre> <p>Next, update the scope to include <code>chat:write</code>, which will prompt you to reinstall the app.</p> <p>Congrats! You can now easily load the saved block, which holds your credentials:</p> <pre><code>from prefect_slack import SlackCredentials\n\nSlackCredentials.load(\"BLOCK-NAME-PLACEHOLDER\")\n</code></pre> <p>Unsure whether to authenticate with Webhook or OAuth?</p> <p>Webhook requires slightly less configuration and is limited to a single channel, which makes it suitable for getting started.</p>"},{"location":"#integrate-with-prefect-flows","title":"Integrate with Prefect flows","text":"<p><code>prefect-slack</code> makes sending Slack messages effortless, giving you peace of mind that your messages are being sent as expected.</p> <p>First, install prefect-slack and save your Slack credentials to a block to run the examples below!</p> WebhookOAuth <pre><code>from prefect import flow\nfrom prefect_slack import SlackWebhook\nfrom prefect_slack.messages import send_incoming_webhook_message\n\n@flow\ndef example_slack_send_message_flow():\n    slack_webhook = SlackWebhook.load(\"BLOCK-NAME-PLACEHOLDER\")\n    result = send_incoming_webhook_message(\n        slack_webhook=slack_webhook,\n        text=\"This proves send_incoming_webhook_message works!\",\n    )\n    return result\n\nexample_slack_send_message_flow()\n</code></pre> <p>Outputs: <pre><code>16:30:47.101 | INFO    | prefect.engine - Created flow run 'scrupulous-avocet' for flow 'example-slack-send-message-flow'\n16:30:48.389 | INFO    | Flow run 'scrupulous-avocet' - Created task run 'send_incoming_webhook_message-a90deb5e-0' for task 'send_incoming_webhook_message'\n16:30:48.391 | INFO    | Flow run 'scrupulous-avocet' - Executing 'send_incoming_webhook_message-a90deb5e-0' immediately...\n16:30:48.861 | INFO    | Task run 'send_incoming_webhook_message-a90deb5e-0' - Posting message to provided webhook\n16:30:49.390 | INFO    | Task run 'send_incoming_webhook_message-a90deb5e-0' - Finished in state Completed()\n16:30:49.571 | INFO    | Flow run 'scrupulous-avocet' - Finished in state Completed('All states completed.')\n</code></pre></p> <pre><code>from prefect import flow\nfrom prefect_slack import SlackCredentials\nfrom prefect_slack.messages import send_chat_message\n\n@flow\ndef example_slack_send_message_flow():\n    slack_credentials = SlackCredentials.load(\"BLOCK-NAME-PLACEHOLDER\")\n    result = send_chat_message(\n        slack_credentials=slack_credentials,\n        text=\"This proves send_chat_message works!\",\n        channel=\"CHANNEL-NAME-PLACEHOLDER\",\n    )\n    return result\n\nexample_slack_send_message_flow()\n</code></pre> <p>Outputs:</p> <pre><code>16:28:04.294 | INFO    | prefect.engine - Created flow run 'resourceful-koala' for flow 'example-slack-send-message-flow'\n16:28:05.675 | INFO    | Flow run 'resourceful-koala' - Created task run 'send_chat_message-0403e84a-0' for task 'send_chat_message'\n16:28:05.678 | INFO    | Flow run 'resourceful-koala' - Executing 'send_chat_message-0403e84a-0' immediately...\n16:28:06.160 | INFO    | Task run 'send_chat_message-0403e84a-0' - Posting chat message to testing-slack\n16:28:06.674 | INFO    | Task run 'send_chat_message-0403e84a-0' - Finished in state Completed()\n16:28:06.848 | INFO    | Flow run 'resourceful-koala' - Finished in state Completed()\n</code></pre>"},{"location":"#capture-exceptions-and-notify-by-slack-message","title":"Capture exceptions and notify by Slack message","text":"<p>Perhaps you want a Slack notification with the details of the exception when your flow run fails.</p> <p><code>prefect-slack</code> can be wrapped in an <code>except</code> statement to do just that!</p> <pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_slack import SlackWebhook\n\ndef notify_exc_by_slack(exc):\n    context = get_run_context()\n    flow_run_name = context.flow_run.name\n    slack_webhook = SlackWebhook.load(\"BLOCK-NAME-PLACEHOLDER\")\n    slack_webhook.notify(body=f\"Flow run {flow_run_name!r} failed due to {exc}.\")\n\n@flow\ndef example_flow():\n    try:\n        1 / 0\n    except Exception as exc:\n        notify_exc_by_slack(exc)\n        raise\n\nexample_flow()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-slack</code>:</p> <pre><code>pip install prefect-slack\n</code></pre> <p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-slack</code>, feel free to open an issue in the prefect-slack repository.</p> <p>If you have any questions or issues while using <code>prefect-slack</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-slack</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-slack</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"blocks_catalog/","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-slack</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud, first install the required packages, then <pre><code>prefect block register -m prefect_slack\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"blocks_catalog/#credentials-module","title":"Credentials Module","text":"<p>SlackCredentials</p> <p>Block holding Slack credentials for use in tasks and flows.</p> <p>To load the SlackCredentials: <pre><code>from prefect import flow\nfrom prefect_slack.credentials import SlackCredentials\n\n@flow\ndef my_flow():\n    my_block = SlackCredentials.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> SlackWebhook</p> <p>Block holding a Slack webhook for use in tasks and flows.</p> <p>To load the SlackWebhook: <pre><code>from prefect import flow\nfrom prefect_slack.credentials import SlackWebhook\n\n@flow\ndef my_flow():\n    my_block = SlackWebhook.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Credentials Module under Examples Catalog.</p>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_slack.credentials","title":"<code>prefect_slack.credentials</code>","text":"<p>Credential classes used to perform authenticated interacting with Slack.</p>"},{"location":"credentials/#prefect_slack.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_slack.credentials.SlackCredentials","title":"<code>SlackCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Block holding Slack credentials for use in tasks and flows.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <p>Bot user OAuth token for the Slack app used to perform actions.</p> required <p>Examples:</p> <p>Load stored Slack credentials: <pre><code>from prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> <p>Get a Slack client: <pre><code>from prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\nclient = slack_credentials_block.get_client()\n</code></pre></p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>class SlackCredentials(Block):\n    \"\"\"\n    Block holding Slack credentials for use in tasks and flows.\n\n    Args:\n        token: Bot user OAuth token for the Slack app used to perform actions.\n\n    Examples:\n        Load stored Slack credentials:\n        ```python\n        from prefect_slack import SlackCredentials\n        slack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n        ```\n\n        Get a Slack client:\n        ```python\n        from prefect_slack import SlackCredentials\n        slack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n        client = slack_credentials_block.get_client()\n        ```\n    \"\"\"  # noqa E501\n\n    _block_type_name = \"Slack Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-slack/credentials/#prefect_slack.credentials.SlackCredentials\"  # noqa\n\n    token: SecretStr = Field(\n        default=...,\n        description=\"Bot user OAuth token for the Slack app used to perform actions.\",\n    )\n\n    def get_client(self) -&gt; AsyncWebClient:\n        \"\"\"\n        Returns an authenticated `AsyncWebClient` to interact with the Slack API.\n        \"\"\"\n        return AsyncWebClient(token=self.token.get_secret_value())\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_slack.credentials.SlackCredentials.get_client","title":"<code>get_client()</code>","text":"<p>Returns an authenticated <code>AsyncWebClient</code> to interact with the Slack API.</p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>def get_client(self) -&gt; AsyncWebClient:\n    \"\"\"\n    Returns an authenticated `AsyncWebClient` to interact with the Slack API.\n    \"\"\"\n    return AsyncWebClient(token=self.token.get_secret_value())\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook","title":"<code>SlackWebhook</code>","text":"<p>             Bases: <code>NotificationBlock</code></p> <p>Block holding a Slack webhook for use in tasks and flows.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <p>Slack webhook URL which can be used to send messages (e.g. <code>https://hooks.slack.com/XXX</code>).</p> required <p>Examples:</p> <p>Load stored Slack webhook: <pre><code>from prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n</code></pre></p> <p>Get a Slack webhook client: <pre><code>from prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nclient = slack_webhook_block.get_client()\n</code></pre></p> <p>Send a notification in Slack: <pre><code>from prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nslack_webhook_block.notify(\"Hello, world!\")\n</code></pre></p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>class SlackWebhook(NotificationBlock):\n    \"\"\"\n    Block holding a Slack webhook for use in tasks and flows.\n\n    Args:\n        url: Slack webhook URL which can be used to send messages\n            (e.g. `https://hooks.slack.com/XXX`).\n\n    Examples:\n        Load stored Slack webhook:\n        ```python\n        from prefect_slack import SlackWebhook\n        slack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n        ```\n\n        Get a Slack webhook client:\n        ```python\n        from prefect_slack import SlackWebhook\n        slack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n        client = slack_webhook_block.get_client()\n        ```\n\n        Send a notification in Slack:\n        ```python\n        from prefect_slack import SlackWebhook\n        slack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n        slack_webhook_block.notify(\"Hello, world!\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Slack Incoming Webhook\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-slack/credentials/#prefect_slack.credentials.SlackWebhook\"  # noqa\n\n    url: SecretStr = Field(\n        default=...,\n        title=\"Webhook URL\",\n        description=\"Slack webhook URL which can be used to send messages.\",\n        example=\"https://hooks.slack.com/XXX\",\n    )\n\n    def get_client(self) -&gt; AsyncWebhookClient:\n        \"\"\"\n        Returns an authenticated `AsyncWebhookClient` to interact with the configured\n        Slack webhook.\n        \"\"\"\n        return AsyncWebhookClient(url=self.url.get_secret_value())\n\n    @sync_compatible\n    async def notify(self, body: str, subject: Optional[str] = None):\n        \"\"\"\n        Sends a message to the Slack channel.\n        \"\"\"\n        client = self.get_client()\n        await client.send(text=body)\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook-functions","title":"Functions","text":""},{"location":"credentials/#prefect_slack.credentials.SlackWebhook.get_client","title":"<code>get_client()</code>","text":"<p>Returns an authenticated <code>AsyncWebhookClient</code> to interact with the configured Slack webhook.</p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>def get_client(self) -&gt; AsyncWebhookClient:\n    \"\"\"\n    Returns an authenticated `AsyncWebhookClient` to interact with the configured\n    Slack webhook.\n    \"\"\"\n    return AsyncWebhookClient(url=self.url.get_secret_value())\n</code></pre>"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook.notify","title":"<code>notify(body, subject=None)</code>  <code>async</code>","text":"<p>Sends a message to the Slack channel.</p> Source code in <code>prefect_slack/credentials.py</code> <pre><code>@sync_compatible\nasync def notify(self, body: str, subject: Optional[str] = None):\n    \"\"\"\n    Sends a message to the Slack channel.\n    \"\"\"\n    client = self.get_client()\n    await client.send(text=body)\n</code></pre>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-slack</code>.</p>"},{"location":"examples_catalog/#credentials-module","title":"Credentials Module","text":"<p>Load stored Slack webhook: <pre><code>from prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n</code></pre></p> <p>Get a Slack webhook client: <pre><code>from prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nclient = slack_webhook_block.get_client()\n</code></pre></p> <p>Send a notification in Slack: <pre><code>from prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nslack_webhook_block.notify(\"Hello, world!\")\n</code></pre> Load stored Slack credentials: <pre><code>from prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> <p>Get a Slack client: <pre><code>from prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\nclient = slack_credentials_block.get_client()\n</code></pre></p>"},{"location":"examples_catalog/#messages-module","title":"Messages Module","text":"<p>Post a message at the end of a flow run.</p> <p><pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_slack import SlackCredentials\nfrom prefect_slack.messages import send_chat_message\n\n\n@flow\ndef example_send_message_flow():\n    context = get_run_context()\n\n    # Run other tasks and subflows here\n\n    token = \"xoxb-your-bot-token-here\"\n    send_chat_message(\n        slack_credentials=SlackCredentials(token),\n        channel=\"#prefect\",\n        text=f\"Flow run {context.flow_run.name} completed :tada:\"\n    )\n\nexample_send_message_flow()\n</code></pre> Post a message at the end of a flow run.</p> <pre><code>from prefect import flow\nfrom prefect_slack import SlackWebhook\nfrom prefect_slack.messages import send_incoming_webhook_message\n\n\n@flow\ndef example_send_message_flow():\n    # Run other tasks and subflows here\n\n    webhook_url = \"https://hooks.slack.com/XXX\"\n    send_incoming_webhook_message(\n        slack_webhook=SlackWebhook(\n            url=webhook_url\n        ),\n        text=\"Warehouse loading flow completed :sparkles:\"\n    )\n\nexample_send_message_flow()\n</code></pre>"},{"location":"messages/","title":"Messages","text":""},{"location":"messages/#prefect_slack.messages","title":"<code>prefect_slack.messages</code>","text":"<p>Tasks for sending Slack messages.</p>"},{"location":"messages/#prefect_slack.messages-classes","title":"Classes","text":""},{"location":"messages/#prefect_slack.messages-functions","title":"Functions","text":""},{"location":"messages/#prefect_slack.messages.send_chat_message","title":"<code>send_chat_message(channel, slack_credentials, text=None, attachments=None, slack_blocks=None)</code>  <code>async</code>","text":"<p>Sends a message to a Slack channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>str</code> <p>The name of the channel in which to post the chat messsage (e.g. #general).</p> required <code>slack_credentials</code> <code>SlackCredentials</code> <p>Instance of <code>SlackCredentials</code> initialized with a Slack bot token.</p> required <code>text</code> <code>Optional[str]</code> <p>Contents of the message. It's a best practice to always provide a <code>text</code> argument when posting a message. The <code>text</code> argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc.</p> <code>None</code> <code>attachments</code> <code>Optional[Sequence[Union[Dict, Attachment]]]</code> <p>List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments.</p> <code>None</code> <code>slack_blocks</code> <code>Optional[Sequence[Union[Dict, Block]]]</code> <p>List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>Response from the Slack API. Example response structures can be found in the Slack API docs.</p> Example <p>Post a message at the end of a flow run.</p> <pre><code>from prefect import flow\nfrom prefect.context import get_run_context\nfrom prefect_slack import SlackCredentials\nfrom prefect_slack.messages import send_chat_message\n\n\n@flow\ndef example_send_message_flow():\n    context = get_run_context()\n\n    # Run other tasks and subflows here\n\n    token = \"xoxb-your-bot-token-here\"\n    send_chat_message(\n        slack_credentials=SlackCredentials(token),\n        channel=\"#prefect\",\n        text=f\"Flow run {context.flow_run.name} completed :tada:\"\n    )\n\nexample_send_message_flow()\n</code></pre> Source code in <code>prefect_slack/messages.py</code> <pre><code>@task\nasync def send_chat_message(\n    channel: str,\n    slack_credentials: SlackCredentials,\n    text: Optional[str] = None,\n    attachments: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.attachments.Attachment\"]]\n    ] = None,\n    slack_blocks: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.blocks.Block\"]]\n    ] = None,\n) -&gt; Dict:\n    \"\"\"\n    Sends a message to a Slack channel.\n\n    Args:\n        channel: The name of the channel in which to post the chat messsage\n            (e.g. #general).\n        slack_credentials: Instance of `SlackCredentials` initialized with a Slack\n            bot token.\n        text: Contents of the message. It's a best practice to always provide a `text`\n            argument when posting a message. The `text` argument is used in places where\n            content cannot be rendered such as: system push notifications, assistive\n            technology such as screen readers, etc.\n        attachments: List of objects defining secondary context in the posted Slack\n            message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments)\n            provide guidance on building attachments.\n        slack_blocks: List of objects defining the layout and formatting of the posted\n            message. The [Slack API docs](https://api.slack.com/block-kit/building)\n            provide guidance on building messages with blocks.\n\n    Returns:\n        Dict: Response from the Slack API. Example response structures can be found in\n            the [Slack API docs](https://api.slack.com/methods/chat.postMessage#examples).\n\n    Example:\n        Post a message at the end of a flow run.\n\n        ```python\n        from prefect import flow\n        from prefect.context import get_run_context\n        from prefect_slack import SlackCredentials\n        from prefect_slack.messages import send_chat_message\n\n\n        @flow\n        def example_send_message_flow():\n            context = get_run_context()\n\n            # Run other tasks and subflows here\n\n            token = \"xoxb-your-bot-token-here\"\n            send_chat_message(\n                slack_credentials=SlackCredentials(token),\n                channel=\"#prefect\",\n                text=f\"Flow run {context.flow_run.name} completed :tada:\"\n            )\n\n        example_send_message_flow()\n        ```\n    \"\"\"  # noqa\n    logger = get_run_logger()\n    logger.info(\"Posting chat message to %s\", channel)\n\n    client = slack_credentials.get_client()\n    result = await client.chat_postMessage(\n        channel=channel, text=text, blocks=slack_blocks, attachments=attachments\n    )\n    return result.data\n</code></pre>"},{"location":"messages/#prefect_slack.messages.send_incoming_webhook_message","title":"<code>send_incoming_webhook_message(slack_webhook, text=None, attachments=None, slack_blocks=None)</code>  <code>async</code>","text":"<p>Sends a message via an incoming webhook.</p> <p>Parameters:</p> Name Type Description Default <code>slack_webhook</code> <code>SlackWebhook</code> <p>Instance of <code>SlackWebhook</code> initialized with a Slack webhook URL.</p> required <code>text</code> <code>Optional[str]</code> <p>Contents of the message. It's a best practice to always provide a <code>text</code> argument when posting a message. The <code>text</code> argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc.</p> <code>None</code> <code>attachments</code> <code>Optional[Sequence[Union[Dict, Attachment]]]</code> <p>List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments.</p> <code>None</code> <code>slack_blocks</code> <code>Optional[Sequence[Union[Dict, Block]]]</code> <p>List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks.</p> <code>None</code> Example <p>Post a message at the end of a flow run.</p> <pre><code>from prefect import flow\nfrom prefect_slack import SlackWebhook\nfrom prefect_slack.messages import send_incoming_webhook_message\n\n\n@flow\ndef example_send_message_flow():\n    # Run other tasks and subflows here\n\n    webhook_url = \"https://hooks.slack.com/XXX\"\n    send_incoming_webhook_message(\n        slack_webhook=SlackWebhook(\n            url=webhook_url\n        ),\n        text=\"Warehouse loading flow completed :sparkles:\"\n    )\n\nexample_send_message_flow()\n</code></pre> Source code in <code>prefect_slack/messages.py</code> <pre><code>@task\nasync def send_incoming_webhook_message(\n    slack_webhook: SlackWebhook,\n    text: Optional[str] = None,\n    attachments: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.attachments.Attachment\"]]\n    ] = None,\n    slack_blocks: Optional[\n        Sequence[Union[Dict, \"slack_sdk.models.blocks.Block\"]]\n    ] = None,\n) -&gt; None:\n    \"\"\"\n    Sends a message via an incoming webhook.\n\n    Args:\n        slack_webhook: Instance of `SlackWebhook` initialized with a Slack\n            webhook URL.\n        text: Contents of the message. It's a best practice to always provide a `text`\n            argument when posting a message. The `text` argument is used in places where\n            content cannot be rendered such as: system push notifications, assistive\n            technology such as screen readers, etc.\n        attachments: List of objects defining secondary context in the posted Slack\n            message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments)\n            provide guidance on building attachments.\n        slack_blocks: List of objects defining the layout and formatting of the posted\n            message. The [Slack API docs](https://api.slack.com/block-kit/building)\n            provide guidance on building messages with blocks.\n\n    Example:\n        Post a message at the end of a flow run.\n\n        ```python\n        from prefect import flow\n        from prefect_slack import SlackWebhook\n        from prefect_slack.messages import send_incoming_webhook_message\n\n\n        @flow\n        def example_send_message_flow():\n            # Run other tasks and subflows here\n\n            webhook_url = \"https://hooks.slack.com/XXX\"\n            send_incoming_webhook_message(\n                slack_webhook=SlackWebhook(\n                    url=webhook_url\n                ),\n                text=\"Warehouse loading flow completed :sparkles:\"\n            )\n\n        example_send_message_flow()\n        ```\n    \"\"\"  # noqa\n    logger = get_run_logger()\n    logger.info(\"Posting message to provided webhook\")\n\n    client = slack_webhook.get_client()\n    await client.send(text=text, attachments=attachments, blocks=slack_blocks)\n</code></pre>"}]}