{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-slack Welcome! prefect-slack is a collections of prebuilt Prefect tasks that can be used to quickly construct Prefect flows. Getting Started Python setup Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-slack pip install prefect-slack Slack setup In order to use tasks in the collection, you'll first need to create an Slack app and install it in your Slack workspace. You can create a Slack app by navigating to the apps page for your Slack account and selecting 'Create New App'. For tasks that require a Bot user OAuth token, you can get a token for your app by navigating to your apps OAuth & Permissions page. For tasks that require and Webhook URL, you get generate new Webhook URLs by navigating to you apps Incoming Webhooks page. Slack's Basic app setup guide provides additional details on setting up a Slack app. Write and run a flow from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow () Resources If you encounter and bugs while using prefect-slack , feel free to open an issue in the prefect-slack repository. If you have any questions or issues while using prefect-slack , you can find help in either the Prefect Discourse forum or the Prefect Slack community Development If you'd like to install a version of prefect-slack for development, first clone the repository and then perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-slack.git cd prefect-slack/ pip install -e \".[dev]\"","title":"Home"},{"location":"#prefect-slack","text":"","title":"prefect-slack"},{"location":"#welcome","text":"prefect-slack is a collections of prebuilt Prefect tasks that can be used to quickly construct Prefect flows.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+ We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-slack pip install prefect-slack","title":"Installation"},{"location":"#slack-setup","text":"In order to use tasks in the collection, you'll first need to create an Slack app and install it in your Slack workspace. You can create a Slack app by navigating to the apps page for your Slack account and selecting 'Create New App'. For tasks that require a Bot user OAuth token, you can get a token for your app by navigating to your apps OAuth & Permissions page. For tasks that require and Webhook URL, you get generate new Webhook URLs by navigating to you apps Incoming Webhooks page. Slack's Basic app setup guide provides additional details on setting up a Slack app.","title":"Slack setup"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter and bugs while using prefect-slack , feel free to open an issue in the prefect-slack repository. If you have any questions or issues while using prefect-slack , you can find help in either the Prefect Discourse forum or the Prefect Slack community","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-slack for development, first clone the repository and then perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-slack.git cd prefect-slack/ pip install -e \".[dev]\"","title":"Development"},{"location":"credentials/","text":"prefect_slack.credentials Credential classes used to perform authenticated interacting with Slack SlackCredentials dataclass Class for holding Slack credentials for use in tasks and flows. Parameters: Name Type Description Default token str Bot user OAuth token for the Slack app used to perform actions. required Source code in prefect_slack/credentials.py class SlackCredentials : \"\"\" Class for holding Slack credentials for use in tasks and flows. Args: token: Bot user OAuth token for the Slack app used to perform actions. \"\"\" token : str def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token ) get_client ( self ) Returns an authenticated AsyncWebClient to interact with the Slack API. Source code in prefect_slack/credentials.py def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token ) SlackWebhook dataclass Class holding a Slack webhook for use in tasks and flows. Parameters: Name Type Description Default url str Slack webhook URL which can be used to send messages (e.g. https://hooks.slack.com/XXX ). required Source code in prefect_slack/credentials.py class SlackWebhook : \"\"\" Class holding a Slack webhook for use in tasks and flows. Args: url: Slack webhook URL which can be used to send messages (e.g. `https://hooks.slack.com/XXX`). \"\"\" url : str def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url ) get_client ( self ) Returns and authenticated AsyncWebhookClient to interact with the configured Slack webhook. Source code in prefect_slack/credentials.py def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url )","title":"Credentials"},{"location":"credentials/#prefect_slack.credentials","text":"Credential classes used to perform authenticated interacting with Slack","title":"credentials"},{"location":"credentials/#prefect_slack.credentials.SlackCredentials","text":"Class for holding Slack credentials for use in tasks and flows. Parameters: Name Type Description Default token str Bot user OAuth token for the Slack app used to perform actions. required Source code in prefect_slack/credentials.py class SlackCredentials : \"\"\" Class for holding Slack credentials for use in tasks and flows. Args: token: Bot user OAuth token for the Slack app used to perform actions. \"\"\" token : str def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token )","title":"SlackCredentials"},{"location":"credentials/#prefect_slack.credentials.SlackCredentials.get_client","text":"Returns an authenticated AsyncWebClient to interact with the Slack API. Source code in prefect_slack/credentials.py def get_client ( self ) -> AsyncWebClient : \"\"\" Returns an authenticated `AsyncWebClient` to interact with the Slack API. \"\"\" return AsyncWebClient ( token = self . token )","title":"get_client()"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook","text":"Class holding a Slack webhook for use in tasks and flows. Parameters: Name Type Description Default url str Slack webhook URL which can be used to send messages (e.g. https://hooks.slack.com/XXX ). required Source code in prefect_slack/credentials.py class SlackWebhook : \"\"\" Class holding a Slack webhook for use in tasks and flows. Args: url: Slack webhook URL which can be used to send messages (e.g. `https://hooks.slack.com/XXX`). \"\"\" url : str def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url )","title":"SlackWebhook"},{"location":"credentials/#prefect_slack.credentials.SlackWebhook.get_client","text":"Returns and authenticated AsyncWebhookClient to interact with the configured Slack webhook. Source code in prefect_slack/credentials.py def get_client ( self ) -> AsyncWebhookClient : \"\"\" Returns and authenticated `AsyncWebhookClient` to interact with the configured Slack webhook. \"\"\" return AsyncWebhookClient ( url = self . url )","title":"get_client()"},{"location":"messages/","text":"prefect_slack.messages Tasks for sending Slack messages send_chat_message ( channel , slack_credentials , text = None , attachments = None , slack_blocks = None ) async Sends a message to a Slack channel Parameters: Name Type Description Default channel str The name of the channel in which to post the chat messsage (e.g. #general) required slack_credentials SlackCredentials Instance of SlackCredentials initialized with a Slack bot token required text Optional[str] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional[Sequence[Union[Dict, slack_sdk.models.attachments.Attachment]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional[Sequence[Union[Dict, slack_sdk.models.blocks.Block]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Returns: Type Description Dict Response from the Slack API. Example response structures can be found in the Slack API docs Examples: Post a message at the end of a flow run from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow () Source code in prefect_slack/messages.py @task async def send_chat_message ( channel : str , slack_credentials : SlackCredentials , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> Dict : \"\"\" Sends a message to a Slack channel Args: channel: The name of the channel in which to post the chat messsage (e.g. #general) slack_credentials: Instance of `SlackCredentials` initialized with a Slack bot token text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Returns: Dict: Response from the Slack API. Example response structures can be found in the [Slack API docs](https://api.slack.com/methods/chat.postMessage#examples) Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow(): context = get_run_context() # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message( slack_credentials=SlackCredentials(token), channel=\"#prefect\", text=f\"Flow run {context.flow_run.name} completed :tada:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting chat message to %s \" , channel ) client = slack_credentials . get_client () result = await client . chat_postMessage ( channel = channel , text = text , blocks = slack_blocks , attachments = attachments ) return result . data send_incoming_webhook_message ( slack_webhook , text = None , attachments = None , slack_blocks = None ) async Sends a message via an incoming webhook Parameters: Name Type Description Default slack_webhook SlackWebhook Instance of SlackWebhook initialized with a Slack webhook URL. required text Optional[str] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional[Sequence[Union[Dict, slack_sdk.models.attachments.Attachment]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional[Sequence[Union[Dict, slack_sdk.models.blocks.Block]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Examples: Post a message at the end of a flow run from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow (): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message ( slack_webhook = SlackWebhook ( url = webhook_url ), text = \"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow () Source code in prefect_slack/messages.py @task async def send_incoming_webhook_message ( slack_webhook : SlackWebhook , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> None : \"\"\" Sends a message via an incoming webhook Args: slack_webhook: Instance of `SlackWebhook` initialized with a Slack webhook URL. text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow(): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message( slack_webhook=SlackWebhook( url=webhook_url ), text=\"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting message to provided webhook\" ) client = slack_webhook . get_client () await client . send ( text = text , attachments = attachments , blocks = slack_blocks )","title":"Messages"},{"location":"messages/#prefect_slack.messages","text":"Tasks for sending Slack messages","title":"messages"},{"location":"messages/#prefect_slack.messages.send_chat_message","text":"Sends a message to a Slack channel Parameters: Name Type Description Default channel str The name of the channel in which to post the chat messsage (e.g. #general) required slack_credentials SlackCredentials Instance of SlackCredentials initialized with a Slack bot token required text Optional[str] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional[Sequence[Union[Dict, slack_sdk.models.attachments.Attachment]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional[Sequence[Union[Dict, slack_sdk.models.blocks.Block]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Returns: Type Description Dict Response from the Slack API. Example response structures can be found in the Slack API docs Examples: Post a message at the end of a flow run from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow (): context = get_run_context () # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message ( slack_credentials = SlackCredentials ( token ), channel = \"#prefect\" , text = f \"Flow run { context . flow_run . name } completed :tada:\" ) example_send_message_flow () Source code in prefect_slack/messages.py @task async def send_chat_message ( channel : str , slack_credentials : SlackCredentials , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> Dict : \"\"\" Sends a message to a Slack channel Args: channel: The name of the channel in which to post the chat messsage (e.g. #general) slack_credentials: Instance of `SlackCredentials` initialized with a Slack bot token text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Returns: Dict: Response from the Slack API. Example response structures can be found in the [Slack API docs](https://api.slack.com/methods/chat.postMessage#examples) Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect.context import get_run_context from prefect_slack import SlackCredentials from prefect_slack.messages import send_chat_message @flow def example_send_message_flow(): context = get_run_context() # Run other tasks and subflows here token = \"xoxb-your-bot-token-here\" send_chat_message( slack_credentials=SlackCredentials(token), channel=\"#prefect\", text=f\"Flow run {context.flow_run.name} completed :tada:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting chat message to %s \" , channel ) client = slack_credentials . get_client () result = await client . chat_postMessage ( channel = channel , text = text , blocks = slack_blocks , attachments = attachments ) return result . data","title":"send_chat_message()"},{"location":"messages/#prefect_slack.messages.send_incoming_webhook_message","text":"Sends a message via an incoming webhook Parameters: Name Type Description Default slack_webhook SlackWebhook Instance of SlackWebhook initialized with a Slack webhook URL. required text Optional[str] Contents of the message. It's a best practice to always provide a text argument when posting a message. The text argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. None attachments Optional[Sequence[Union[Dict, slack_sdk.models.attachments.Attachment]]] List of objects defining secondary context in the posted Slack message. The Slack API docs provide guidance on building attachments. None slack_blocks Optional[Sequence[Union[Dict, slack_sdk.models.blocks.Block]]] List of objects defining the layout and formatting of the posted message. The Slack API docs provide guidance on building messages with blocks. None Examples: Post a message at the end of a flow run from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow (): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message ( slack_webhook = SlackWebhook ( url = webhook_url ), text = \"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow () Source code in prefect_slack/messages.py @task async def send_incoming_webhook_message ( slack_webhook : SlackWebhook , text : Optional [ str ] = None , attachments : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.attachments.Attachment\" ]] ] = None , slack_blocks : Optional [ Sequence [ Union [ Dict , \"slack_sdk.models.blocks.Block\" ]] ] = None , ) -> None : \"\"\" Sends a message via an incoming webhook Args: slack_webhook: Instance of `SlackWebhook` initialized with a Slack webhook URL. text: Contents of the message. It's a best practice to always provide a `text` argument when posting a message. The `text` argument is used in places where content cannot be rendered such as: system push notifications, assistive technology such as screen readers, etc. attachments: List of objects defining secondary context in the posted Slack message. The [Slack API docs](https://api.slack.com/messaging/composing/layouts#building-attachments) provide guidance on building attachments. slack_blocks: List of objects defining the layout and formatting of the posted message. The [Slack API docs](https://api.slack.com/block-kit/building) provide guidance on building messages with blocks. Examples: Post a message at the end of a flow run ```python from prefect import flow from prefect_slack import SlackWebhook from prefect_slack.messages import send_incoming_webhook_message @flow def example_send_message_flow(): # Run other tasks and subflows here webhook_url = \"https://hooks.slack.com/XXX\" send_incoming_webhook_message( slack_webhook=SlackWebhook( url=webhook_url ), text=\"Warehouse loading flow completed :sparkles:\" ) example_send_message_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Posting message to provided webhook\" ) client = slack_webhook . get_client () await client . send ( text = text , attachments = attachments , blocks = slack_blocks )","title":"send_incoming_webhook_message()"}]}